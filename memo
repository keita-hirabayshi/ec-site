プロジェクトの作成
    コマンドにて作成した際は、phpMyAdminは含まれていないので、ファイル作成後「docker.compose」にて追記
    そののち、「sail up」にて起動する必要がある
レポジトリの設定
    ローカルレポジトリの作成「git init   git add -A . 」
    リモートとの接続・push「git branch -M main , git remote add htttp 」
デバッカーの追加
    laravel用のものがある「sail composer require barryvdh/laravel-debugbar」
    sail artisan serve起動時に使える
    configファイルの更新を行う際は、「sail artisan config:clear / cache:clear」にてフレッシュする

Vite laravel-Breeze
    フロントエンド・ビルド・ツール
        現在は、vite (昔はwebpack = l
        「sail npm run dev」
    認証機能
        laravel breeze だと簡単に使用できる
レイアウト
    tailwind モバイルファーストが主流
    tailwind,vite等は「package.json」にあり
component
    resource / app/view のいずれかにある    
    修正しやすい、htmlをパーツに分けられる「slot」

    データの受け渡し
    ①slot                     →  単純に値を<x-> </x->内に記載
    ②header                   →  値は<x-slot name="header">書きたい内容 </x->と記載
    ③属性{{$title}},{{name}}   →  値は<x-  title="A" name="B"> </x->と記載
    ④変数{{$message}}          →  <x- :message="{{$message}}">    :によって変数と解釈されるようになる
    ⑤初期値(props)
    ⑤css(attribute)           →  部分的に変更する

    Alpine js                        x- の表記が特徴。tailwindのjavascript版

ライフサイクル
    1. まず初めに、public/index.phpが読み込まれる。(autoload,bootstrapファイルの適用)
        bootstrapにてサービスコンテナを生成
        サービスコンテナ  サービスを入れる箱(bindメソッドで取り込み、makeメソッドで出力できる)
    2.次にコンテナ内のhttpカーネルをインスタンス化し、さらにリクエストインスタンスを生成
    3.httpかネールを用いて、requestをもとにresponse(cookieなどの情報)を取得し、terminateでくっつける
    *詳細はホムペ参照
    *サービスプロバイダ内にて、サービスコンテナへ処理を登録する関数を登録しておけば、リクエスト時に自動でサービスコンテナへ登録されるようになる。

モデル
    デフォルトで入っている、user model と同様に、Authenticatable を継承・fillableも適用しとく
    sail artisan migrate:refresh  で取り消し可能

ルート
    routeServiceProviderにて、URLに応じ読み込むユーザー区分を選択できるようにする

    config/auth.php にて読み込まれる。  (guardとproviderの設定) 
    authファザードはguardインスタンスとセット

ミドルウェア
    非認証時のリダイレクト処理(Authenticate.php)
    認証時のリダイレクト処理(RedirectIfAuthenticate.php)
    Auth::guard()を使えば、guardに応じて処理を切り替える事が可能

コントローラー・ビュー
    user,owner,adminをそれぞれ作成
    middlewareはrouteだけでなく、controllerでもつけておく
設計
    上流工程    企画・要件定義・設計（どういったアプリを作るか。各ページの表示や動きはどうするか。）
    下流工程    実装・テスト・リリース
    
画像
    publicとstorageの2パターンあり。(storage側は初期の状態だと読み込み難 sail artisan storage:link)
    役割が異なる    public → 画像の表示  storage → アップロード画像の保存先
    スタッシュで囲み{} asset関数で記載すれば、/public/imagesフォルダ内の画像を表示できる

データ
    扱い方は、コレクション・クエリービルダ・エロクアントの3タイプ
    取得の仕方で、中身の構造が変わってくるので、適時確認すると良い
