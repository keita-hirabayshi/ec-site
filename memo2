オーナー
    owner:shop  1:1     →   オーナー登録時にショップも連動して作成される
    商品(画像・カテゴリー)登録

店舗登録
    「sail artisan make:model Shop -m」
    外部キーがある場合には、migrationファイルで設定しておくことで、設定できる
    また、modelファイルでは、リレーションを設定する必要がある  →  これを使う事で、外部キーで紐づくデータを取得できる

    オーナー削除
        FK制約がかかっている場合には、migrationファイルにて「on update delete」を記載する必要がある

    middleware
        オーナーが別の店舗情報を見れないように、constructで設定してあげる

    エラー処理
        カスタマイズしたいなら、vendor:publish  にて、vendor/publish内にファイル生成し、そこで編集する「tailwindのpaginationと同様」
    画像のアップロード
        interventionImageでリサイズするなど可能
    フォームリクエスト
        画像用のリクエストを作成
    サービスへの切り離し
        controller内はスマートにしておきたいので、コードの多いメソッドを別ファイルへ切り離す(service)

画像登録
    順序的には「商品」からだが、まず画像から登録を行なっていく

    アップロード
        複数登録する場合は、formにて[]配列 指定したり、storeメソッドにて foreach 対応する必要がある
    edit
        タイトルのみ編集できるようにしておく

カテゴリー
    primary,secondaryを設定(モデルの作成、リレーション、マイグレーション)

product
    shop,category,imageと複数の外部キーがあるので、cascade,nullの有無などを明記する必要がある
    リレーションの設定は各々しなくていもいいかも

eager loading(withメソッド)
    SQL処理の簡略化が可能
    外部キーの関係が複雑な場合は、データ取得の際のSQL処理にも時間を要する
    withメソッドを使えば、1回のsqlで取得可能に      with(FK1,FK2,リレーションメソッド)

ポップアイコン(Micromodal)
    「micromodal」ホームページにて参照

product作成
    FK以外の要素の入力フォームの作成、storeチェック
    edit,update画面の作成

    destroy
        テーブルデータ削除にあたり、FKが設定されている場合には 宛先テーブルにて cascade設定されているか確認する必要がある

    データの取得
        SQLにて、販売中のものを取得。ここにstockテーブルデータをjoint
        select句にてjoinで結合したテーブル中で重複しているカラムデータを別名に置き換える
        ('products.id as id', 'products.name as name')

    スライドショー(swiper)
        version 6.2でインストールする必要あり(互換性の問題)

定数の設定(どんな値か見える化できる)
    APPフォルダ内に設定し、configフォルダに登録。これにより呼び出す時に、\Constant のみで呼び出せる

Cartの設定
    user,productは多対多の関係なので、中間テーブルとしてcartを置く
    テーブルを作成し、リレーションも設定
    入力処理

STRIPE(決済処理方法)
    .envファイルに追記

    git.ignoreに記載のファイルはアップロードされない
    決済処理 → 在庫を確認し決済前に在庫を減らす

ローカルスコープ
    共通で使用可能なクエリ制約を作成できる(shop,productのis_sellingがtrueで、在庫が1以上のものなど)

表示順
    script にて記載
    表示順と表示件数の順番設定のちに、両者を適用させたい場合は pagination->link にてappendix 設定をする必要がある
注意点
    新規でcontroller作成する際は、routeにcotroller記載 → controller作成としないとだめ
    productについては、ソフトデリート画面を作っても良い
    ブランチ名の変更はgit branch -m で可能

.envファイルを変更した時に行う事
    sail artisan config:cache

非同期処理
    フロント側ではなく、バック側で処理を実行したい時に使う。
    処理内容を専用テーブルに保存(キュー・ジョブ)し、workで処理を行う
    *前提として、workerが起動している必要がある(sail artisan queue:work)
